{"ast":null,"code":"\"use client\";\n\nvar _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { showError } from \"../../utils/notifications\";\n\n/**\r\n * Custom hook for managing appointment slots\r\n */\nconst useSlots = () => {\n  _s();\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [isLoadingSlots, setIsLoadingSlots] = useState(false);\n\n  /**\r\n   * Fetch available slots for a specific date and service\r\n   * @param {String} date - Selected date\r\n   * @param {String} service - Selected service\r\n   */\n  const fetchAvailableSlots = useCallback(async (date, service) => {\n    if (!date || !service) return;\n    setIsLoadingSlots(true);\n    try {\n      const response = await axios.get(\"/api/appointments/available-slots\", {\n        params: {\n          date,\n          service\n        }\n      });\n      setAvailableSlots(response.data);\n    } catch (error) {\n      console.error(\"Error fetching slots:\", error);\n      showError(\"Failed to load available time slots\");\n      setAvailableSlots([]);\n    } finally {\n      setIsLoadingSlots(false);\n    }\n  }, []);\n  return {\n    availableSlots,\n    fetchAvailableSlots,\n    isLoadingSlots\n  };\n};\n_s(useSlots, \"zGpdWafoObieY+4xqgQ39PtIh/M=\");\nexport default useSlots;","map":{"version":3,"names":["_s","$RefreshSig$","useState","useCallback","axios","showError","useSlots","availableSlots","setAvailableSlots","isLoadingSlots","setIsLoadingSlots","fetchAvailableSlots","date","service","response","get","params","data","error","console"],"sources":["C:/Users/Admin/CSE_Projects/beauty/frontend/src/components/Appointment/useSlots.js"],"sourcesContent":["\"use client\"\r\n\r\nimport { useState, useCallback } from \"react\"\r\nimport axios from \"axios\"\r\nimport { showError } from \"../../utils/notifications\"\r\n\r\n/**\r\n * Custom hook for managing appointment slots\r\n */\r\nconst useSlots = () => {\r\n  const [availableSlots, setAvailableSlots] = useState([])\r\n  const [isLoadingSlots, setIsLoadingSlots] = useState(false)\r\n\r\n  /**\r\n   * Fetch available slots for a specific date and service\r\n   * @param {String} date - Selected date\r\n   * @param {String} service - Selected service\r\n   */\r\n  const fetchAvailableSlots = useCallback(async (date, service) => {\r\n    if (!date || !service) return\r\n\r\n    setIsLoadingSlots(true)\r\n\r\n    try {\r\n      const response = await axios.get(\"/api/appointments/available-slots\", {\r\n        params: { date, service },\r\n      })\r\n\r\n      setAvailableSlots(response.data)\r\n    } catch (error) {\r\n      console.error(\"Error fetching slots:\", error)\r\n      showError(\"Failed to load available time slots\")\r\n      setAvailableSlots([])\r\n    } finally {\r\n      setIsLoadingSlots(false)\r\n    }\r\n  }, [])\r\n\r\n  return {\r\n    availableSlots,\r\n    fetchAvailableSlots,\r\n    isLoadingSlots,\r\n  }\r\n}\r\n\r\nexport default useSlots\r\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,EAAA,GAAAC,YAAA;AAEZ,SAASC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,2BAA2B;;AAErD;AACA;AACA;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAN,EAAA;EACrB,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAE3D;AACF;AACA;AACA;AACA;EACE,MAAMS,mBAAmB,GAAGR,WAAW,CAAC,OAAOS,IAAI,EAAEC,OAAO,KAAK;IAC/D,IAAI,CAACD,IAAI,IAAI,CAACC,OAAO,EAAE;IAEvBH,iBAAiB,CAAC,IAAI,CAAC;IAEvB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,mCAAmC,EAAE;QACpEC,MAAM,EAAE;UAAEJ,IAAI;UAAEC;QAAQ;MAC1B,CAAC,CAAC;MAEFL,iBAAiB,CAACM,QAAQ,CAACG,IAAI,CAAC;IAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7Cb,SAAS,CAAC,qCAAqC,CAAC;MAChDG,iBAAiB,CAAC,EAAE,CAAC;IACvB,CAAC,SAAS;MACRE,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLH,cAAc;IACdI,mBAAmB;IACnBF;EACF,CAAC;AACH,CAAC;AAAAT,EAAA,CAlCKM,QAAQ;AAoCd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}